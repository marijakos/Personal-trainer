[{"D:\\workspace\\Semestar4\\Front End Development\\personaltrainer\\src\\reportWebVitals.js":"1","D:\\workspace\\Semestar4\\Front End Development\\personaltrainer\\src\\App.js":"2","D:\\workspace\\Semestar4\\Front End Development\\personaltrainer\\src\\components\\Customers.js":"3","D:\\workspace\\Semestar4\\Front End Development\\personaltrainer\\src\\components\\Trainings.js":"4","D:\\workspace\\Semestar4\\Front End Development\\personaltrainer\\src\\components\\AddCustomer.js":"5","D:\\workspace\\Semestar4\\Front End Development\\personaltrainer\\src\\components\\EditCustomer.js":"6","D:\\workspace\\Semestar4\\Front End Development\\personaltrainer\\src\\components\\AddTraining.js":"7","D:\\workspace\\Semestar4\\Front End Development\\personaltrainer\\src\\components\\Calendar.js":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":3799,"mtime":1606944667872,"results":"11","hashOfConfig":"10"},{"size":7853,"mtime":1606840042000,"results":"12","hashOfConfig":"10"},{"size":6404,"mtime":1606938700304,"results":"13","hashOfConfig":"10"},{"size":4064,"mtime":1606526642347,"results":"14","hashOfConfig":"10"},{"size":4907,"mtime":1606526654466,"results":"15","hashOfConfig":"10"},{"size":2966,"mtime":1606942238154,"results":"16","hashOfConfig":"10"},{"size":2029,"mtime":1606944531453,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"rt1xg1",{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\workspace\\Semestar4\\Front End Development\\personaltrainer\\src\\reportWebVitals.js",[],"D:\\workspace\\Semestar4\\Front End Development\\personaltrainer\\src\\App.js",["37","38","39"],"D:\\workspace\\Semestar4\\Front End Development\\personaltrainer\\src\\components\\Customers.js",["40"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport AddCustomer from './AddCustomer';\r\nimport EditCustomer from './EditCustomer';\r\nimport AddTraining from './AddTraining';\r\n\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-material.css';\r\nimport { AgGridReact } from 'ag-grid-react/lib/agGridReact';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\"  {...props} />;\r\n}\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    Iconbutton: {\r\n      margin: theme.spacing(1),\r\n    },\r\n  }));\r\n\r\nfunction Customers () {\r\n    const [customers, setCustomers] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [open, setOpen] = useState(false);\r\n    const [msg, setMsg] = useState('');\r\n\r\n    const gridRef = useRef();\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() =>{\r\n        if (loading) {\r\n            setLoading(false);\r\n            getCustomers();\r\n        }\r\n    })\r\n\r\n    const columns = [\r\n\r\n        {headerName: 'First name', field: 'firstname', sortable: true, filter: true, floatingFilter: true},\r\n        {headerName: 'Last name', field: 'lastname', sortable: true, filter: true, floatingFilter: true},\r\n        {headerName: 'Email', field: 'email', sortable: true, filter: true, floatingFilter: true},\r\n        {headerName: 'Phone', field: 'phone', sortable: true, filter: true, floatingFilter: true},\r\n        {headerName: 'Address', field: 'streetaddress', sortable: true, filter: true, floatingFilter: true},\r\n        {headerName: 'Post code', field: 'postcode', sortable: true, filter: true, floatingFilter: true},\r\n        {headerName: 'City', field: 'city', sortable: true, filter: true, floatingFilter: true},\r\n        {\r\n            headerName:'',\r\n            filed: 'links',\r\n            cellRendererFramework: params => <AddTraining addTraining={addTraining} params={params} />},\r\n\r\n        {\r\n            headerName: '',\r\n            width: 100,\r\n            field: 'links',\r\n            cellRendererFramework: params => <EditCustomer updateCustomer={updateCustomer} params={params}/>\r\n        },\r\n        {\r\n            headerName: '',\r\n            field: 'links',\r\n            cellRendererFramework: params => <IconButton\r\n                                                aria-label=\"delete\"\r\n                                                onClick={() => deleteCustomer(params.value)}\r\n                                                color=\"secondary\"\r\n                                                size=\"small\"\r\n                                                className ={classes.button}\r\n                                                variant=\"contained\"\r\n                                                startIcon={<DeleteIcon />}\r\n                                                >\r\n                                                <DeleteIcon />\r\n                                                </IconButton>\r\n        }\r\n    ]\r\n\r\n\r\n    const getCustomers = () => {\r\n        fetch('https://customerrest.herokuapp.com/api/customers')\r\n        .then(response => response.json())\r\n        .then(data => setCustomers(data.content))\r\n        .catch(err => console.error(err))\r\n    }\r\n\r\n    const deleteCustomer = (link) => {\r\n        if (window.confirm('Are you sure?')) {\r\n            fetch(link[0].href, {\r\n                method: 'DELETE'\r\n            })\r\n            .then(_ => getCustomers())\r\n            .then(_ => setMsg(<Alert onClose={handleClose} severity=\"success\">Successfully deleted</Alert>))\r\n            .then(_ => setOpen(true))\r\n            .catch(err => console.error(err))\r\n        }\r\n    }\r\n\r\n    const addCustomer = (newCustomer) => {\r\n        fetch('https://customerrest.herokuapp.com/api/customers', {\r\n            method: 'POST',\r\n            headers: {'Content-type': 'application/json'},\r\n            body: JSON.stringify(newCustomer)\r\n        })\r\n        .then(_=> getCustomers())\r\n        .catch(err => console.error(err))\r\n        .then(_ => setMsg(<Alert onClose={handleClose} severity=\"success\">Successfully added customer</Alert>))\r\n        .then(_ => setOpen(true))\r\n    }\r\n\r\n    const updateCustomer = (link, customer) => {\r\n        fetch(link[0].href, {\r\n            method: 'PUT',\r\n            headers: {'Content-type' : 'application/json'},\r\n            body: JSON.stringify(customer)\r\n        })\r\n        .then(_ => getCustomers())\r\n        .catch(err => console.error(err))\r\n    }\r\n\r\n    const addTraining = (newTraining) => {\r\n        fetch('https://customerrest.herokuapp.com/api/trainings', {\r\n            method: 'POST',\r\n            headers: {'Content-type': 'application/json'},\r\n            body: JSON.stringify(newTraining)\r\n        })\r\n        //.then(_=> getTrainings())\r\n        .catch(err => console.error(err))\r\n        .then(_ => setMsg(<Alert onClose={handleClose} severity=\"success\">Successfully added training</Alert>))\r\n        .then(_ => setOpen(true))\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    }\r\n    //Grouped and sorted otions in autocomplete\r\n      const options = customers.map((option) => {\r\n        const firstLetter = option.firstname[0].toUpperCase();\r\n        return {\r\n          firstLetter,\r\n          ...option,\r\n        };\r\n      });\r\n//Autocomplete-onChange(newValue) - show in the table selected option\r\n    const filterCustomers = (value) => {\r\n        if (value == null) {\r\n            getCustomers();\r\n            return;\r\n        }\r\n        let filteredCustomers = [];\r\n        for (let i = 0; i < customers.length; i++) {\r\n            if (customers[i].firstname === value.firstname) {\r\n                filteredCustomers.push(customers[i]);\r\n            }\r\n        }\r\n        setCustomers(filteredCustomers);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n\r\n            <div className=\"ag-theme-material\" style={{height: '700px', width: '80%',  margin: 'auto', paddingTop: '30px'}}>\r\n                <AddCustomer addCustomer={addCustomer} />\r\n                <Autocomplete\r\n                    options={options.sort((a, b) => -b.firstLetter.localeCompare(a.firstLetter))}\r\n                    groupBy={(option) => option.firstLetter}\r\n                    getOptionLabel={(option) => option.firstname}\r\n                    id=\"search-by-name\"\r\n                    autoHighlight\r\n                    style={{ width: 300 }}\r\n                    renderInput={(params) => <TextField {...params} label=\"Search by Name\" margin=\"normal\" />}\r\n                    fullWidth\r\n                    onChange={(event, newValue) => filterCustomers(newValue)}\r\n                />\r\n\r\n                <AgGridReact\r\n                    ref={gridRef}\r\n                    onGridReady={ params => {\r\n                        gridRef.current = params.api\r\n                        params.api.sizeColumnsToFit();\r\n                    } }\r\n                    columnDefs = {columns}\r\n                    rowData = {customers}\r\n                    rowSelection=\"single\"\r\n                    pagination={true}\r\n                    paginationPageSize={10}\r\n                    animateRows=\"true\"\r\n\r\n\r\n                >\r\n                </AgGridReact>\r\n                <Snackbar\r\n                        open={open}\r\n                        autoHideDuration={5000}\r\n                        onClose={handleClose}\r\n                        message={msg}\r\n                    />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Customers;\r\n",["41","42"],"D:\\workspace\\Semestar4\\Front End Development\\personaltrainer\\src\\components\\Trainings.js",["43","44"],"D:\\workspace\\Semestar4\\Front End Development\\personaltrainer\\src\\components\\AddCustomer.js",[],["45","46"],"D:\\workspace\\Semestar4\\Front End Development\\personaltrainer\\src\\components\\EditCustomer.js",[],"D:\\workspace\\Semestar4\\Front End Development\\personaltrainer\\src\\components\\AddTraining.js",["47"],"D:\\workspace\\Semestar4\\Front End Development\\personaltrainer\\src\\components\\Calendar.js",["48"],{"ruleId":"49","severity":1,"message":"50","line":7,"column":22,"nodeType":"51","messageId":"52","endLine":7,"endColumn":31},{"ruleId":"49","severity":1,"message":"53","line":10,"column":10,"nodeType":"51","messageId":"52","endLine":10,"endColumn":14},{"ruleId":"49","severity":1,"message":"54","line":17,"column":8,"nodeType":"51","messageId":"52","endLine":17,"endColumn":18},{"ruleId":"55","severity":1,"message":"56","line":40,"column":5,"nodeType":"51","endLine":40,"endColumn":14,"suggestions":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"55","severity":1,"message":"56","line":38,"column":5,"nodeType":"51","endLine":38,"endColumn":14,"suggestions":"62"},{"ruleId":"63","severity":1,"message":"64","line":74,"column":41,"nodeType":"65","messageId":"66","endLine":74,"endColumn":43},{"ruleId":"58","replacedBy":"67"},{"ruleId":"60","replacedBy":"68"},{"ruleId":"49","severity":1,"message":"69","line":16,"column":26,"nodeType":"51","messageId":"52","endLine":16,"endColumn":42},{"ruleId":"55","severity":1,"message":"70","line":22,"column":10,"nodeType":"71","endLine":22,"endColumn":12,"suggestions":"72"},"no-unused-vars","'InputBase' is defined but never used.","Identifier","unusedVar","'fade' is defined but never used.","'SearchIcon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setLoading'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [loading] as a second argument to the useEffect Hook.",["73"],"no-native-reassign",["74"],"no-negated-in-lhs",["75"],["76"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["74"],["75"],"'handleDataChange' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getTrainings'. Either include it or remove the dependency array.","ArrayExpression",["77"],{"desc":"78","fix":"79"},"no-global-assign","no-unsafe-negation",{"desc":"78","fix":"80"},{"desc":"81","fix":"82"},"Add dependencies array: [loading]",{"range":"83","text":"84"},{"range":"85","text":"84"},"Update the dependencies array to be: [getTrainings]",{"range":"86","text":"87"},[1378,1378],", [loading]",[1282,1282],[574,576],"[getTrainings]"]